/*
 Navicat Premium Data Transfer

 Source Server         : beink
 Source Server Type    : MySQL
 Source Server Version : 50740
 Source Host           : localhost:3306
 Source Schema         : kob

 Target Server Type    : MySQL
 Target Server Version : 50740
 File Encoding         : 65001

 Date: 26/03/2023 11:02:05
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `markdown` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (1, '# King Of Bots简称KOB\n一个策略类AI的对战平台，平台上可以发布对战项目，每个同学可以实现自己的AI，然后支持AI与AI的PK与演示。\n项目成品参考[Botzone](https://www.botzone.org.cn/)———在线程序对战平台。\n\n项目地址：[https://github.com/AcNotAutomaton/KOB](https://github.com/AcNotAutomaton/KOB)');

-- ----------------------------
-- Table structure for bot
-- ----------------------------
DROP TABLE IF EXISTS `bot`;
CREATE TABLE `bot`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `title` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `description` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `content` varchar(10000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `rating` int(11) NULL DEFAULT 1500,
  `createtime` datetime NULL DEFAULT NULL,
  `modifytime` datetime NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `table_name_id_uindex`(`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bot
-- ----------------------------
INSERT INTO `bot` VALUES (2, 3, 'NB 的 Bot', '这个用户很懒，什么也没留下~', 'package com.kob.botrunningsystem.utils;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Bot implements java.util.function.Supplier<Integer> {\n\n    static class Cell {\n        public int x, y;\n\n        public Cell(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static List<Cell> aCells = new LinkedList<>();\n    private static List<Cell> bCells = new LinkedList<>();\n\n    private static final int DEPTH = 10;\n\n    private static final int[] dx = {-1, 0, 1, 0}, dy = {0, 1, 0, -1};\n\n    private static int step; // 回合数\n\n    private static int move = -1;\n\n    // 检验当前回合，长度是否增加  true 增加, 增加时-头部移动,尾部不变, 不增加-头部移动,尾部删除\n    private static boolean checkTailIncreasing(int step) {\n        if (step <= 10) return true;    // 前10回合每回合长度+1\n        return step % 3 == 1;    // 10回合之后没三回合长度+1\n    }\n\n    // 通过操作字符串 返回玩家位置list      起始坐标         玩家操作信息字符串\n    public static List<Cell> getCells(int sx, int sy, String steps) {\n        List<Cell> res = new LinkedList<>();\n        int x = sx, y = sy;\n        int step = 0;\n        res.add(new Cell(x, y));\n        for (int i = 0; i < steps.length(); i++) {\n            int d = steps.charAt(i) - \'0\';\n            x += dx[d];\n            y += dy[d];\n            res.add(new Cell(x, y));\n            if (!checkTailIncreasing(++step)) { // 长度不增加,\n                res.remove(0);\n            }\n        }\n        return res;\n    }\n\n    // 地图#自己起始横坐标#自己起始纵坐标#(自己操作)#对手起始横坐标#对手起始纵坐标#(对手操作)\n    public static Integer nextMove(String input) {\n        String[] strs = input.split(\"#\");    // (#拼接)   棋盘(0/1)#a玩家起始x坐标#a玩家起始y坐标   // 对于棋盘来说,只有可走不可走(0/1)\n        int[][] g = new int[13][14];    // 棋盘中 0:可走位置 1:不可走位置\n        // 棋盘 13 * 14\n        for (int i = 0, k = 0; i < 13; i++) {\n            for (int j = 0; j < 14; j++, k++) {\n                if (strs[0].charAt(k) == \'1\') {    // 棋盘中的墙\n                    g[i][j] = 1;\n                }\n            }\n        }\n\n        // 起始坐标\n        int aSx = Integer.parseInt(strs[1]), aSy = Integer.parseInt(strs[2]);\n        int bSx = Integer.parseInt(strs[4]), bSy = Integer.parseInt(strs[5]);\n\n        // 把操作 转换为🐍\n        aCells = getCells(aSx, aSy, strs[3].substring(1, strs[3].length() - 1)); // (1010101)\n        bCells = getCells(bSx, bSy, strs[6].substring(1, strs[6].length() - 1));\n\n        // 回合数 玩家移动次数\n        step = strs[3].length() - 2;\n\n        // 将初始🐍转换为地图信息\n        for (Cell c : aCells) g[c.x][c.y] = 1;    // a玩家游戏位置\n        for (Cell c : bCells) g[c.x][c.y] = 1;    // b玩家游戏位置\n\n        // 特殊情况处理 -----------------------------------\n        // 玩家可走当前可走方向数量只有4种 0, 1, 2, 3\n        int moveNumber = moveNumber(g, aCells);\n        if (moveNumber == 0) { // 0种 表示已经输, 特殊处理, 无需minmax, 随便返回一个方向即可\n            return 0;\n        }\n        if (moveNumber == 1)  // 1种 只能这样走, 特殊处理, 无需minmax, 返回此时能走的方向\n            for (int i = 0; i < 4; i++) {\n                int x = aCells.get(aCells.size() - 1).x + dx[i];\n                int y = aCells.get(aCells.size() - 1).y + dy[i];\n                if (isMove(g, x, y))\n                    return i;\n            }\n\n        int depth = DEPTH; // 深度\n        max(g, depth, Integer.MIN_VALUE, Integer.MAX_VALUE);\n\n        return move; // 返回操作\n    }\n\n    // 棋盘中 0:可走位置 1:玩家位置\n    // minimax算法实现          棋盘   深度: depth回合        α剪枝 β剪枝\n    public static int max(int[][] g, int depth, int alpha, int beta) {\n        step++; // 回合数 ++;\n\n        int score = checkScore(g, aCells, bCells, depth); // 计算分数\n        if (score <= 11) return score; // 必输的局\n        if (depth == 0) return score; // 走到最底层, 返回全局分数\n\n        // move\n        int i = 0;\n        for (i = 0; i < 4; i++) {\n            int x = aCells.get(aCells.size() - 1).x + dx[i];\n            int y = aCells.get(aCells.size() - 1).y + dy[i];\n            if (!isMove(g, x, y)) continue;\n            Cell cell = null;\n            g[x][y] = 1;\n            aCells.add(new Cell(x, y)); // 更新玩家位置信息, 玩家位置信息为全局变量\n\n            if (!checkTailIncreasing(step)) { // 长度不增加\n                cell = new Cell(aCells.get(0).x, aCells.get(0).y);\n                g[cell.x][cell.y] = 0;\n                aCells.remove(0);\n            }\n\n            int value = min(g, depth, alpha, beta, score);\n\n            // 还原现场\n            g[x][y] = 0;\n            aCells.remove(aCells.size() - 1);\n            if (cell != null) {\n                aCells.add(0, cell);\n                g[cell.x][cell.y] = 1;\n            }\n\n            // α剪枝 , 再分数判断中进行方向判断\n            // alpha = Math.max(alpha, value);\n            if (value > alpha) {\n                alpha = value;\n                if (depth == DEPTH)\n                    move = i;\n            }\n            if (alpha >= beta) {\n                return beta;\n            }\n        }\n        return alpha;\n    }\n\n    public static int min(int[][] g, int depth, int alpha, int beta, int aScore) {\n\n        // b落子\n        for (int i = 0; i < 4; i++) {\n            int x = bCells.get(bCells.size() - 1).x + dx[i];\n            int y = bCells.get(bCells.size() - 1).y + dy[i];\n\n            // 判断位置是否合法(是否能走), 属于分数的范畴,直接失败的操作,单独提取出来\n            if (!isMove(g, x, y)) continue;\n\n            // 操作\n            Cell cell = null;\n            g[x][y] = 1;\n            bCells.add(new Cell(x, y));\n\n            if (!checkTailIncreasing(step)) { // 长度不增加\n                cell = new Cell(bCells.get(0).x, bCells.get(0).y);\n                g[cell.x][cell.y] = 0;\n                bCells.remove(0);\n\n            }\n\n            int value = max(g, depth - 1, alpha, beta);\n            // 还原现场\n            step--; // 回去,回合数也 --;\n            g[x][y] = 0;\n            bCells.remove(bCells.size() - 1);\n            if (cell != null) {\n                bCells.add(0, cell);\n                g[cell.x][cell.y] = 1;\n            }\n\n            // β剪枝\n            beta = Math.min(beta, value);\n            if (alpha >= beta) {\n                return alpha;\n            }\n        }\n        return beta;\n    }\n\n    // 下个位置是可移动\n    public static boolean isMove(int[][] g, int x, int y) {\n        // 越界\n        if (x < 0 || x >= 13 || y < 0 || y >= 14) return false;\n        // 碰撞 0:可走位置 1:不可走 玩家位置,障碍物\n        if (g[x][y] == 1) return false;\n\n        return true;\n    }\n\n    // 此位置下一步可走方向数量\n    public static int moveNumber(int[][] g, List<Cell> playerCells) {\n        int res = 0;\n        for (int i = 0; i < 4; i++) {\n            int x = playerCells.get(playerCells.size() - 1).x + dx[i];\n            int y = playerCells.get(playerCells.size() - 1).y + dy[i];\n            if (isMove(g, x, y))\n                res++;\n        }\n        return res;\n    }\n\n    // 只考虑自己\n    // 计算分数 评估函数( 层数 * 可移动方向数量)             自己的信息       对手的信息\n    public static int checkScore(int[][] g, List<Cell> playerCells, List<Cell> foe, int depth) {\n        // 失败  玩家四个方法无法移动, 失败的情况归属到一般情况中  <= 11\n        if (moveNumber(g, playerCells) == 0) return (DEPTH - depth + 1) * 1;\n\n        // 返回当前位置可走步数 (小分数)    扩大可走位置的倍数\n        return (DEPTH - depth + 1) * (int) (Math.pow(moveNumber(g, playerCells) + 1, 2)) + 11;\n\n    }\n\n    @Override\n    public Integer get() {\n        // (#拼接)\n        File file = new File(\"input.txt\");\n        try {\n            Scanner sc = new Scanner(file);\n            return nextMove(sc.next());\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}', 1500, '2023-03-21 12:09:22', '2023-03-23 17:45:23');
INSERT INTO `bot` VALUES (3, 4, 'ai', 'ai', 'package com.kob.botrunningsystem.utils;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Bot implements java.util.function.Supplier<Integer> {\n\n    static class Cell {\n        public int x, y;\n\n        public Cell(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static List<Cell> aCells = new LinkedList<>();\n    private static List<Cell> bCells = new LinkedList<>();\n\n    private static final int DEPTH = 10;\n\n    private static final int[] dx = {-1, 0, 1, 0}, dy = {0, 1, 0, -1};\n\n    private static int step; // 回合数\n\n    private static int move = -1;\n\n    // 检验当前回合，长度是否增加  true 增加, 增加时-头部移动,尾部不变, 不增加-头部移动,尾部删除\n    private static boolean checkTailIncreasing(int step) {\n        if (step <= 10) return true;    // 前10回合每回合长度+1\n        return step % 3 == 1;    // 10回合之后没三回合长度+1\n    }\n\n    // 通过操作字符串 返回玩家位置list      起始坐标         玩家操作信息字符串\n    public static List<Cell> getCells(int sx, int sy, String steps) {\n        List<Cell> res = new LinkedList<>();\n        int x = sx, y = sy;\n        int step = 0;\n        res.add(new Cell(x, y));\n        for (int i = 0; i < steps.length(); i++) {\n            int d = steps.charAt(i) - \'0\';\n            x += dx[d];\n            y += dy[d];\n            res.add(new Cell(x, y));\n            if (!checkTailIncreasing(++step)) { // 长度不增加,\n                res.remove(0);\n            }\n        }\n        return res;\n    }\n\n    // 地图#自己起始横坐标#自己起始纵坐标#(自己操作)#对手起始横坐标#对手起始纵坐标#(对手操作)\n    public static Integer nextMove(String input) {\n        String[] strs = input.split(\"#\");    // (#拼接)   棋盘(0/1)#a玩家起始x坐标#a玩家起始y坐标   // 对于棋盘来说,只有可走不可走(0/1)\n        int[][] g = new int[13][14];    // 棋盘中 0:可走位置 1:不可走位置\n        // 棋盘 13 * 14\n        for (int i = 0, k = 0; i < 13; i++) {\n            for (int j = 0; j < 14; j++, k++) {\n                if (strs[0].charAt(k) == \'1\') {    // 棋盘中的墙\n                    g[i][j] = 1;\n                }\n            }\n        }\n\n        // 起始坐标\n        int aSx = Integer.parseInt(strs[1]), aSy = Integer.parseInt(strs[2]);\n        int bSx = Integer.parseInt(strs[4]), bSy = Integer.parseInt(strs[5]);\n\n        // 把操作 转换为🐍\n        aCells = getCells(aSx, aSy, strs[3].substring(1, strs[3].length() - 1)); // (1010101)\n        bCells = getCells(bSx, bSy, strs[6].substring(1, strs[6].length() - 1));\n\n        // 回合数 玩家移动次数\n        step = strs[3].length() - 2;\n\n        // 将初始🐍转换为地图信息\n        for (Cell c : aCells) g[c.x][c.y] = 1;    // a玩家游戏位置\n        for (Cell c : bCells) g[c.x][c.y] = 1;    // b玩家游戏位置\n\n        // 特殊情况处理 -----------------------------------\n        // 玩家可走当前可走方向数量只有4种 0, 1, 2, 3\n        int moveNumber = moveNumber(g, aCells);\n        if (moveNumber == 0) { // 0种 表示已经输, 特殊处理, 无需minmax, 随便返回一个方向即可\n            return 0;\n        }\n        if (moveNumber == 1)  // 1种 只能这样走, 特殊处理, 无需minmax, 返回此时能走的方向\n            for (int i = 0; i < 4; i++) {\n                int x = aCells.get(aCells.size() - 1).x + dx[i];\n                int y = aCells.get(aCells.size() - 1).y + dy[i];\n                if (isMove(g, x, y))\n                    return i;\n            }\n\n        int depth = DEPTH; // 深度\n        max(g, depth, Integer.MIN_VALUE, Integer.MAX_VALUE);\n\n        return move; // 返回操作\n    }\n\n    // 棋盘中 0:可走位置 1:玩家位置\n    // minimax算法实现          棋盘   深度: depth回合        α剪枝 β剪枝\n    public static int max(int[][] g, int depth, int alpha, int beta) {\n        step++; // 回合数 ++;\n\n        int score = checkScore(g, aCells, bCells, depth); // 计算分数\n        if (score <= 11) return score; // 必输的局\n        if (depth == 0) return score; // 走到最底层, 返回全局分数\n\n        // move\n        int i = 0;\n        for (i = 0; i < 4; i++) {\n            int x = aCells.get(aCells.size() - 1).x + dx[i];\n            int y = aCells.get(aCells.size() - 1).y + dy[i];\n            if (!isMove(g, x, y)) continue;\n            Cell cell = null;\n            g[x][y] = 1;\n            aCells.add(new Cell(x, y)); // 更新玩家位置信息, 玩家位置信息为全局变量\n\n            if (!checkTailIncreasing(step)) { // 长度不增加\n                cell = new Cell(aCells.get(0).x, aCells.get(0).y);\n                g[cell.x][cell.y] = 0;\n                aCells.remove(0);\n            }\n\n            int value = min(g, depth, alpha, beta, score);\n\n            // 还原现场\n            g[x][y] = 0;\n            aCells.remove(aCells.size() - 1);\n            if (cell != null) {\n                aCells.add(0, cell);\n                g[cell.x][cell.y] = 1;\n            }\n\n            // α剪枝 , 再分数判断中进行方向判断\n            // alpha = Math.max(alpha, value);\n            if (value > alpha) {\n                alpha = value;\n                if (depth == DEPTH)\n                    move = i;\n            }\n            if (alpha >= beta) {\n                return beta;\n            }\n        }\n        return alpha;\n    }\n\n    public static int min(int[][] g, int depth, int alpha, int beta, int aScore) {\n\n        // b落子\n        for (int i = 0; i < 4; i++) {\n            int x = bCells.get(bCells.size() - 1).x + dx[i];\n            int y = bCells.get(bCells.size() - 1).y + dy[i];\n\n            // 判断位置是否合法(是否能走), 属于分数的范畴,直接失败的操作,单独提取出来\n            if (!isMove(g, x, y)) continue;\n\n            // 操作\n            Cell cell = null;\n            g[x][y] = 1;\n            bCells.add(new Cell(x, y));\n\n            if (!checkTailIncreasing(step)) { // 长度不增加\n                cell = new Cell(bCells.get(0).x, bCells.get(0).y);\n                g[cell.x][cell.y] = 0;\n                bCells.remove(0);\n\n            }\n\n            int value = max(g, depth - 1, alpha, beta);\n            // 还原现场\n            step--; // 回去,回合数也 --;\n            g[x][y] = 0;\n            bCells.remove(bCells.size() - 1);\n            if (cell != null) {\n                bCells.add(0, cell);\n                g[cell.x][cell.y] = 1;\n            }\n\n            // β剪枝\n            beta = Math.min(beta, value);\n            if (alpha >= beta) {\n                return alpha;\n            }\n        }\n        return beta;\n    }\n\n    // 下个位置是可移动\n    public static boolean isMove(int[][] g, int x, int y) {\n        // 越界\n        if (x < 0 || x >= 13 || y < 0 || y >= 14) return false;\n        // 碰撞 0:可走位置 1:不可走 玩家位置,障碍物\n        if (g[x][y] == 1) return false;\n\n        return true;\n    }\n\n    // 此位置下一步可走方向数量\n    public static int moveNumber(int[][] g, List<Cell> playerCells) {\n        int res = 0;\n        for (int i = 0; i < 4; i++) {\n            int x = playerCells.get(playerCells.size() - 1).x + dx[i];\n            int y = playerCells.get(playerCells.size() - 1).y + dy[i];\n            if (isMove(g, x, y))\n                res++;\n        }\n        return res;\n    }\n\n    // 只考虑自己\n    // 计算分数 评估函数( 层数 * 可移动方向数量)             自己的信息       对手的信息\n    public static int checkScore(int[][] g, List<Cell> playerCells, List<Cell> foe, int depth) {\n        // 失败  玩家四个方法无法移动, 失败的情况归属到一般情况中  <= 11\n        if (moveNumber(g, playerCells) == 0) return (DEPTH - depth + 1) * 1;\n\n        // 返回当前位置可走步数 (小分数)    扩大可走位置的倍数\n        return (DEPTH - depth + 1) * (int) (Math.pow(moveNumber(g, playerCells) + 1, 2)) + 11;\n\n    }\n\n    @Override\n    public Integer get() {\n        // (#拼接)\n        File file = new File(\"input.txt\");\n        try {\n            Scanner sc = new Scanner(file);\n            return nextMove(sc.next());\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n', 1500, '2023-03-21 19:38:56', '2023-03-22 14:37:22');
INSERT INTO `bot` VALUES (4, 1, 'ai', 'ai', 'package com.kob.botrunningsystem.utils;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Bot implements java.util.function.Supplier<Integer> {\n\n    static class Cell {\n        public int x, y;\n\n        public Cell(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static List<Cell> aCells = new LinkedList<>();\n    private static List<Cell> bCells = new LinkedList<>();\n\n    private static final int DEPTH = 10;\n\n    private static final int[] dx = {-1, 0, 1, 0}, dy = {0, 1, 0, -1};\n\n    private static int step; // 回合数\n\n    private static int move = -1;\n\n    // 检验当前回合，长度是否增加  true 增加, 增加时-头部移动,尾部不变, 不增加-头部移动,尾部删除\n    private static boolean checkTailIncreasing(int step) {\n        if (step <= 10) return true;    // 前10回合每回合长度+1\n        return step % 3 == 1;    // 10回合之后没三回合长度+1\n    }\n\n    // 通过操作字符串 返回玩家位置list      起始坐标         玩家操作信息字符串\n    public static List<Cell> getCells(int sx, int sy, String steps) {\n        List<Cell> res = new LinkedList<>();\n        int x = sx, y = sy;\n        int step = 0;\n        res.add(new Cell(x, y));\n        for (int i = 0; i < steps.length(); i++) {\n            int d = steps.charAt(i) - \'0\';\n            x += dx[d];\n            y += dy[d];\n            res.add(new Cell(x, y));\n            if (!checkTailIncreasing(++step)) { // 长度不增加,\n                res.remove(0);\n            }\n        }\n        return res;\n    }\n\n    // 地图#自己起始横坐标#自己起始纵坐标#(自己操作)#对手起始横坐标#对手起始纵坐标#(对手操作)\n    public static Integer nextMove(String input) {\n        String[] strs = input.split(\"#\");    // (#拼接)   棋盘(0/1)#a玩家起始x坐标#a玩家起始y坐标   // 对于棋盘来说,只有可走不可走(0/1)\n        int[][] g = new int[13][14];    // 棋盘中 0:可走位置 1:不可走位置\n        // 棋盘 13 * 14\n        for (int i = 0, k = 0; i < 13; i++) {\n            for (int j = 0; j < 14; j++, k++) {\n                if (strs[0].charAt(k) == \'1\') {    // 棋盘中的墙\n                    g[i][j] = 1;\n                }\n            }\n        }\n\n        // 起始坐标\n        int aSx = Integer.parseInt(strs[1]), aSy = Integer.parseInt(strs[2]);\n        int bSx = Integer.parseInt(strs[4]), bSy = Integer.parseInt(strs[5]);\n\n        // 把操作 转换为🐍\n        aCells = getCells(aSx, aSy, strs[3].substring(1, strs[3].length() - 1)); // (1010101)\n        bCells = getCells(bSx, bSy, strs[6].substring(1, strs[6].length() - 1));\n\n        // 回合数 玩家移动次数\n        step = strs[3].length() - 2;\n\n        // 将初始🐍转换为地图信息\n        for (Cell c : aCells) g[c.x][c.y] = 1;    // a玩家游戏位置\n        for (Cell c : bCells) g[c.x][c.y] = 1;    // b玩家游戏位置\n\n        // 特殊情况处理 -----------------------------------\n        // 玩家可走当前可走方向数量只有4种 0, 1, 2, 3\n        int moveNumber = moveNumber(g, aCells);\n        if (moveNumber == 0) { // 0种 表示已经输, 特殊处理, 无需minmax, 随便返回一个方向即可\n            return 0;\n        }\n        if (moveNumber == 1)  // 1种 只能这样走, 特殊处理, 无需minmax, 返回此时能走的方向\n            for (int i = 0; i < 4; i++) {\n                int x = aCells.get(aCells.size() - 1).x + dx[i];\n                int y = aCells.get(aCells.size() - 1).y + dy[i];\n                if (isMove(g, x, y))\n                    return i;\n            }\n\n        int depth = DEPTH; // 深度\n        max(g, depth, Integer.MIN_VALUE, Integer.MAX_VALUE);\n\n        return move; // 返回操作\n    }\n\n    // 棋盘中 0:可走位置 1:玩家位置\n    // minimax算法实现          棋盘   深度: depth回合        α剪枝 β剪枝\n    public static int max(int[][] g, int depth, int alpha, int beta) {\n        step++; // 回合数 ++;\n\n        int score = checkScore(g, aCells, bCells, depth); // 计算分数\n        if (score <= 11) return score; // 必输的局\n        if (depth == 0) return score; // 走到最底层, 返回全局分数\n\n        // move\n        int i = 0;\n        for (i = 0; i < 4; i++) {\n            int x = aCells.get(aCells.size() - 1).x + dx[i];\n            int y = aCells.get(aCells.size() - 1).y + dy[i];\n            if (!isMove(g, x, y)) continue;\n            Cell cell = null;\n            g[x][y] = 1;\n            aCells.add(new Cell(x, y)); // 更新玩家位置信息, 玩家位置信息为全局变量\n\n            if (!checkTailIncreasing(step)) { // 长度不增加\n                cell = new Cell(aCells.get(0).x, aCells.get(0).y);\n                g[cell.x][cell.y] = 0;\n                aCells.remove(0);\n            }\n\n            int value = min(g, depth, alpha, beta, score);\n\n            // 还原现场\n            g[x][y] = 0;\n            aCells.remove(aCells.size() - 1);\n            if (cell != null) {\n                aCells.add(0, cell);\n                g[cell.x][cell.y] = 1;\n            }\n\n            // α剪枝 , 再分数判断中进行方向判断\n            // alpha = Math.max(alpha, value);\n            if (value > alpha) {\n                alpha = value;\n                if (depth == DEPTH)\n                    move = i;\n            }\n            if (alpha >= beta) {\n                return beta;\n            }\n        }\n        return alpha;\n    }\n\n    public static int min(int[][] g, int depth, int alpha, int beta, int aScore) {\n\n        // b落子\n        for (int i = 0; i < 4; i++) {\n            int x = bCells.get(bCells.size() - 1).x + dx[i];\n            int y = bCells.get(bCells.size() - 1).y + dy[i];\n\n            // 判断位置是否合法(是否能走), 属于分数的范畴,直接失败的操作,单独提取出来\n            if (!isMove(g, x, y)) continue;\n\n            // 操作\n            Cell cell = null;\n            g[x][y] = 1;\n            bCells.add(new Cell(x, y));\n\n            if (!checkTailIncreasing(step)) { // 长度不增加\n                cell = new Cell(bCells.get(0).x, bCells.get(0).y);\n                g[cell.x][cell.y] = 0;\n                bCells.remove(0);\n\n            }\n\n            int value = max(g, depth - 1, alpha, beta);\n            // 还原现场\n            step--; // 回去,回合数也 --;\n            g[x][y] = 0;\n            bCells.remove(bCells.size() - 1);\n            if (cell != null) {\n                bCells.add(0, cell);\n                g[cell.x][cell.y] = 1;\n            }\n\n            // β剪枝\n            beta = Math.min(beta, value);\n            if (alpha >= beta) {\n                return alpha;\n            }\n        }\n        return beta;\n    }\n\n    // 下个位置是可移动\n    public static boolean isMove(int[][] g, int x, int y) {\n        // 越界\n        if (x < 0 || x >= 13 || y < 0 || y >= 14) return false;\n        // 碰撞 0:可走位置 1:不可走 玩家位置,障碍物\n        if (g[x][y] == 1) return false;\n\n        return true;\n    }\n\n    // 此位置下一步可走方向数量\n    public static int moveNumber(int[][] g, List<Cell> playerCells) {\n        int res = 0;\n        for (int i = 0; i < 4; i++) {\n            int x = playerCells.get(playerCells.size() - 1).x + dx[i];\n            int y = playerCells.get(playerCells.size() - 1).y + dy[i];\n            if (isMove(g, x, y))\n                res++;\n        }\n        return res;\n    }\n\n    // 只考虑自己\n    // 计算分数 评估函数( 层数 * 可移动方向数量)             自己的信息       对手的信息\n    public static int checkScore(int[][] g, List<Cell> playerCells, List<Cell> foe, int depth) {\n        // 失败  玩家四个方法无法移动, 失败的情况归属到一般情况中  <= 11\n        if (moveNumber(g, playerCells) == 0) return (DEPTH - depth + 1) * 1;\n\n        // 返回当前位置可走步数 (小分数)    扩大可走位置的倍数\n        return (DEPTH - depth + 1) * (int) (Math.pow(moveNumber(g, playerCells) + 1, 2)) + 11;\n\n    }\n\n    @Override\n    public Integer get() {\n        // (#拼接)\n        File file = new File(\"input.txt\");\n        try {\n            Scanner sc = new Scanner(file);\n            return nextMove(sc.next());\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n', 1500, '2023-03-21 17:23:29', '2023-03-22 15:16:17');
INSERT INTO `bot` VALUES (7, 2, 'af', 'faf', 'package com.kob.botrunningsystem.utils;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Bot implements java.util.function.Supplier<Integer> {\n\n    static class Cell {\n        public int x, y;\n\n        public Cell(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static List<Cell> aCells = new LinkedList<>();\n    private static List<Cell> bCells = new LinkedList<>();\n\n    private static final int DEPTH = 10;\n\n    private static final int[] dx = {-1, 0, 1, 0}, dy = {0, 1, 0, -1};\n\n    private static int step; // 回合数\n\n    private static int move = -1;\n\n    // 检验当前回合，长度是否增加  true 增加, 增加时-头部移动,尾部不变, 不增加-头部移动,尾部删除\n    private static boolean checkTailIncreasing(int step) {\n        if (step <= 10) return true;    // 前10回合每回合长度+1\n        return step % 3 == 1;    // 10回合之后没三回合长度+1\n    }\n\n    // 通过操作字符串 返回玩家位置list      起始坐标         玩家操作信息字符串\n    public static List<Cell> getCells(int sx, int sy, String steps) {\n        List<Cell> res = new LinkedList<>();\n        int x = sx, y = sy;\n        int step = 0;\n        res.add(new Cell(x, y));\n        for (int i = 0; i < steps.length(); i++) {\n            int d = steps.charAt(i) - \'0\';\n            x += dx[d];\n            y += dy[d];\n            res.add(new Cell(x, y));\n            if (!checkTailIncreasing(++step)) { // 长度不增加,\n                res.remove(0);\n            }\n        }\n        return res;\n    }\n\n    // 地图#自己起始横坐标#自己起始纵坐标#(自己操作)#对手起始横坐标#对手起始纵坐标#(对手操作)\n    public static Integer nextMove(String input) {\n        String[] strs = input.split(\"#\");    // (#拼接)   棋盘(0/1)#a玩家起始x坐标#a玩家起始y坐标   // 对于棋盘来说,只有可走不可走(0/1)\n        int[][] g = new int[13][14];    // 棋盘中 0:可走位置 1:不可走位置\n        // 棋盘 13 * 14\n        for (int i = 0, k = 0; i < 13; i++) {\n            for (int j = 0; j < 14; j++, k++) {\n                if (strs[0].charAt(k) == \'1\') {    // 棋盘中的墙\n                    g[i][j] = 1;\n                }\n            }\n        }\n\n        // 起始坐标\n        int aSx = Integer.parseInt(strs[1]), aSy = Integer.parseInt(strs[2]);\n        int bSx = Integer.parseInt(strs[4]), bSy = Integer.parseInt(strs[5]);\n\n        // 把操作 转换为🐍\n        aCells = getCells(aSx, aSy, strs[3].substring(1, strs[3].length() - 1)); // (1010101)\n        bCells = getCells(bSx, bSy, strs[6].substring(1, strs[6].length() - 1));\n\n        // 回合数 玩家移动次数\n        step = strs[3].length() - 2;\n\n        // 将初始🐍转换为地图信息\n        for (Cell c : aCells) g[c.x][c.y] = 1;    // a玩家游戏位置\n        for (Cell c : bCells) g[c.x][c.y] = 1;    // b玩家游戏位置\n\n        // 特殊情况处理 -----------------------------------\n        // 玩家可走当前可走方向数量只有4种 0, 1, 2, 3\n        int moveNumber = moveNumber(g, aCells);\n        if (moveNumber == 0) { // 0种 表示已经输, 特殊处理, 无需minmax, 随便返回一个方向即可\n            return 0;\n        }\n        if (moveNumber == 1)  // 1种 只能这样走, 特殊处理, 无需minmax, 返回此时能走的方向\n            for (int i = 0; i < 4; i++) {\n                int x = aCells.get(aCells.size() - 1).x + dx[i];\n                int y = aCells.get(aCells.size() - 1).y + dy[i];\n                if (isMove(g, x, y))\n                    return i;\n            }\n\n        int depth = DEPTH; // 深度\n        max(g, depth, Integer.MIN_VALUE, Integer.MAX_VALUE);\n\n        return move; // 返回操作\n    }\n\n    // 棋盘中 0:可走位置 1:玩家位置\n    // minimax算法实现          棋盘   深度: depth回合        α剪枝 β剪枝\n    public static int max(int[][] g, int depth, int alpha, int beta) {\n        step++; // 回合数 ++;\n\n        int score = checkScore(g, aCells, bCells, depth); // 计算分数\n        if (score <= 11) return score; // 必输的局\n        if (depth == 0) return score; // 走到最底层, 返回全局分数\n\n        // move\n        int i = 0;\n        for (i = 0; i < 4; i++) {\n            int x = aCells.get(aCells.size() - 1).x + dx[i];\n            int y = aCells.get(aCells.size() - 1).y + dy[i];\n            if (!isMove(g, x, y)) continue;\n            Cell cell = null;\n            g[x][y] = 1;\n            aCells.add(new Cell(x, y)); // 更新玩家位置信息, 玩家位置信息为全局变量\n\n            if (!checkTailIncreasing(step)) { // 长度不增加\n                cell = new Cell(aCells.get(0).x, aCells.get(0).y);\n                g[cell.x][cell.y] = 0;\n                aCells.remove(0);\n            }\n\n            int value = min(g, depth, alpha, beta, score);\n\n            // 还原现场\n            g[x][y] = 0;\n            aCells.remove(aCells.size() - 1);\n            if (cell != null) {\n                aCells.add(0, cell);\n                g[cell.x][cell.y] = 1;\n            }\n\n            // α剪枝 , 再分数判断中进行方向判断\n            // alpha = Math.max(alpha, value);\n            if (value > alpha) {\n                alpha = value;\n                if (depth == DEPTH)\n                    move = i;\n            }\n            if (alpha >= beta) {\n                return beta;\n            }\n        }\n        return alpha;\n    }\n\n    public static int min(int[][] g, int depth, int alpha, int beta, int aScore) {\n\n        // b落子\n        for (int i = 0; i < 4; i++) {\n            int x = bCells.get(bCells.size() - 1).x + dx[i];\n            int y = bCells.get(bCells.size() - 1).y + dy[i];\n\n            // 判断位置是否合法(是否能走), 属于分数的范畴,直接失败的操作,单独提取出来\n            if (!isMove(g, x, y)) continue;\n\n            // 操作\n            Cell cell = null;\n            g[x][y] = 1;\n            bCells.add(new Cell(x, y));\n\n            if (!checkTailIncreasing(step)) { // 长度不增加\n                cell = new Cell(bCells.get(0).x, bCells.get(0).y);\n                g[cell.x][cell.y] = 0;\n                bCells.remove(0);\n\n            }\n\n            int value = max(g, depth - 1, alpha, beta);\n            // 还原现场\n            step--; // 回去,回合数也 --;\n            g[x][y] = 0;\n            bCells.remove(bCells.size() - 1);\n            if (cell != null) {\n                bCells.add(0, cell);\n                g[cell.x][cell.y] = 1;\n            }\n\n            // β剪枝\n            beta = Math.min(beta, value);\n            if (alpha >= beta) {\n                return alpha;\n            }\n        }\n        return beta;\n    }\n\n    // 下个位置是可移动\n    public static boolean isMove(int[][] g, int x, int y) {\n        // 越界\n        if (x < 0 || x >= 13 || y < 0 || y >= 14) return false;\n        // 碰撞 0:可走位置 1:不可走 玩家位置,障碍物\n        if (g[x][y] == 1) return false;\n\n        return true;\n    }\n\n    // 此位置下一步可走方向数量\n    public static int moveNumber(int[][] g, List<Cell> playerCells) {\n        int res = 0;\n        for (int i = 0; i < 4; i++) {\n            int x = playerCells.get(playerCells.size() - 1).x + dx[i];\n            int y = playerCells.get(playerCells.size() - 1).y + dy[i];\n            if (isMove(g, x, y))\n                res++;\n        }\n        return res;\n    }\n\n    // 只考虑自己\n    // 计算分数 评估函数( 层数 * 可移动方向数量)             自己的信息       对手的信息\n    public static int checkScore(int[][] g, List<Cell> playerCells, List<Cell> foe, int depth) {\n        // 失败  玩家四个方法无法移动, 失败的情况归属到一般情况中  <= 11\n        if (moveNumber(g, playerCells) == 0) return (DEPTH - depth + 1) * 1;\n\n        // 返回当前位置可走步数 (小分数)    扩大可走位置的倍数\n        return (DEPTH - depth + 1) * (int) (Math.pow(moveNumber(g, playerCells) + 1, 2)) + 11;\n\n    }\n\n    @Override\n    public Integer get() {\n        // (#拼接)\n        File file = new File(\"input.txt\");\n        try {\n            Scanner sc = new Scanner(file);\n            return nextMove(sc.next());\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n', 1500, '2023-03-22 15:08:03', '2023-03-22 15:08:03');

-- ----------------------------
-- Table structure for record
-- ----------------------------
DROP TABLE IF EXISTS `record`;
CREATE TABLE `record`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `a_id` int(11) NULL DEFAULT NULL,
  `a_sx` int(11) NULL DEFAULT NULL,
  `a_sy` int(11) NULL DEFAULT NULL,
  `b_id` int(11) NULL DEFAULT NULL,
  `b_sx` int(11) NULL DEFAULT NULL,
  `b_sy` int(11) NULL DEFAULT NULL,
  `a_steps` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `b_steps` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `map` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `loser` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `createtime` datetime NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 126 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of record
-- ----------------------------
INSERT INTO `record` VALUES (1, 2, 11, 1, 1, 1, 12, '3', '3', '11111111111111101010000000011000000010000111000010000001100000000010011001100100000110100000000101100000100110011001000000000110000001000011100001000000011000000001010111111111111111', 'A', '2023-03-20 18:05:44');
INSERT INTO `record` VALUES (2, 1, 11, 1, 2, 1, 12, '1112', '3330', '11111111111111100000100000011011000000000110100000000101100110000000011000000000001110000111100001110000000000011000000001100110100000000101100000000011011000000100000111111111111111', 'all', '2023-03-20 18:06:22');
INSERT INTO `record` VALUES (3, 2, 11, 1, 1, 1, 12, '11', '30', '11111111111111100011000000011000001010000110000001000001100000000010011000010100010110100000000101101000101000011001000000000110000010000001100001010000011000000011000111111111111111', 'B', '2023-03-20 18:08:12');
INSERT INTO `record` VALUES (4, 1, 11, 1, 2, 1, 12, '', '', '11111111111111110000000000011001000100100110001000000001100110000000011000110000000110100000000101100000001100011000000001100110000000010001100100100010011000000000001111111111111111', 'A', '2023-03-21 09:31:12');
INSERT INTO `record` VALUES (5, 2, 11, 1, 1, 1, 12, '11', '33', '11111111111111100010000000011000000100100110100110000001101010000100011000000100000110000000000001100000100000011000100001010110000001100101100100100000011000000001000111111111111111', 'A', '2023-03-21 09:31:28');
INSERT INTO `record` VALUES (6, 2, 11, 1, 1, 1, 12, '10110001110', '33322123231', '11111111111111100001101000011010000000000110001101000001110000000000111001000000000110000000000001100000000010011100000000001110000010110001100000000001011000010110000111111111111111', 'B', '2023-03-21 09:32:08');
INSERT INTO `record` VALUES (7, 4, 11, 1, 3, 1, 12, '', '', '11111111111111100000000001011000000110000111000000100011100001000000011000100001000111000000000011100010000100011000000010000111000100000011100001100000011010000000000111111111111111', 'A', '2023-03-21 11:10:26');
INSERT INTO `record` VALUES (8, 4, 11, 1, 3, 1, 12, '001', '233', '11111111111111100100100010011010000001000110000010100101101000000000111000000000000110000000000001100000000000011100000000010110100101000001100010000001011001000100100111111111111111', 'A', '2023-03-21 11:10:33');
INSERT INTO `record` VALUES (9, 4, 11, 1, 3, 1, 12, '00000111111', '22223333322', '11111111111111100100000000011001001000100110100001000001101000000100011001010000000110000000000001100000001010011000100000010110000010000101100100010010011000000000100111111111111111', 'A', '2023-03-21 11:10:44');
INSERT INTO `record` VALUES (10, 4, 11, 1, 3, 1, 12, '000011112111111010000333033333321112211121122222333', '222233330330323333221112332211211003011211012223032', '11111111111111100000100110011100000000100110000000100001100000000110011000010000000110000011000001100000001000011001100000000110000100000001100100000000111001100100000111111111111111', 'A', '2023-03-21 11:11:28');
INSERT INTO `record` VALUES (11, 3, 11, 1, 4, 1, 12, '0', '0', '11111111111111100001000001011101000010000111000100000001100100000010011000000000000111000000000011100000000000011001000000100110000000100011100001000010111010000010000111111111111111', 'B', '2023-03-21 11:14:48');
INSERT INTO `record` VALUES (12, 3, 11, 1, 4, 1, 12, '0', '0', '11111111111111101000100010011000000001000110001000000001101000000010011000000101000111000000000011100010100000011001000000010110000000010001100010000000011001000100010111111111111111', 'B', '2023-03-21 11:14:53');
INSERT INTO `record` VALUES (13, 4, 11, 1, 3, 1, 12, '000011221111100101000112222223332321', '232333322333233010111011123322222100', '11111111111111110100100101011000000000100110000000000001100000000001011000000011000110000100100001100011000000011010000000000110000000000001100100000000011010100100101111111111111111', 'A', '2023-03-21 11:15:33');
INSERT INTO `record` VALUES (14, 3, 11, 1, 4, 1, 12, '0101101010103333322230000001011112232211233303322121101110003001210011', '2233323222223332333011011011000030112112222332323333333000000010111113', '11111111111111110000001000011001010000000110101000000001101000100000011000000001000110010000001001100010000000011000000100010110000000010101100000001010011000010000001111111111111111', 'B', '2023-03-21 11:16:42');
INSERT INTO `record` VALUES (15, 4, 11, 1, 3, 1, 12, '101003000001111', '233232323333010', '11111111111111100001100000011010011000000111000000000011100000100000011001000000000110010000001001100000000010011000000100000111000000000011100000011001011000000110000111111111111111', 'B', '2023-03-21 11:17:59');
INSERT INTO `record` VALUES (16, 4, 11, 1, 3, 1, 12, '10001011010122322211', '23032303221211000120', '11111111111111100100000000011000000000000110000010001011100001000000011100100000001110101000010101110000000100111000000010000111010001000001100000000000011000000000100111111111111111', 'B', '2023-03-21 12:12:33');
INSERT INTO `record` VALUES (17, 4, 11, 1, 3, 1, 12, '2', '2', '11111111111111100010000000011000000000000110000001100001100000001001011000100000011111000011000011111000000100011010010000000110000110000001100000000000011000000001000111111111111111', 'A', '2023-03-21 12:14:26');
INSERT INTO `record` VALUES (18, 1, 11, 1, 2, 1, 12, '001000000001111211101112230323221100', '322223222323333000000323221222211010', '11111111111111110000011000011000010000000110000000000001100000010010111000101000000111000000000011100000010100011101001000000110000000000001100000001000011000011000001111111111111111', 'A', '2023-03-21 16:59:06');
INSERT INTO `record` VALUES (19, 1, 11, 1, 2, 1, 12, '', '', '11111111111111100000000000011000011000100110010100000001101001000000011000001000000111001000010011100000010000011000000010010110000000101001100100011000011000000000000111111111111111', 'A', '2023-03-21 17:23:58');
INSERT INTO `record` VALUES (20, 1, 11, 1, 2, 1, 12, '', '', '11111111111111111000000000011001010110000110000000000101100000000001111000000010000110000000000001100001000000011110000000000110100000000001100001101010011000000000011111111111111111', 'A', '2023-03-21 17:24:11');
INSERT INTO `record` VALUES (21, 1, 11, 1, 2, 1, 12, '00000000100120', '32330333332232', '11111111111111100000000010011100010000000110000010100001100000010010011000001100000110000100100001100000110000011001001000000110000101000001100000001000111001000000000111111111111111', 'A', '2023-03-21 17:24:22');
INSERT INTO `record` VALUES (22, 1, 11, 1, 4, 1, 12, '1101003003300', '2222222322120', '11111111111111101100000000011000000000000111000000001001100000000000011011011000000110001011010001100000011011011000000000000110010000000011100000000000011000000000110111111111111111', 'B', '2023-03-21 19:39:54');
INSERT INTO `record` VALUES (23, 1, 11, 1, 4, 1, 12, '100', '323', '11111111111111100100000000011000001000001110010000000101101001000000111000000000001110001000010001110000000000011100000010010110100000001001110000010000011000000000100111111111111111', 'A', '2023-03-21 19:40:10');
INSERT INTO `record` VALUES (24, 1, 11, 1, 4, 1, 12, '111000000332', '222222230000', '11111111111111100010000000011000000000000111000010000001100001100011011000010000100110010000001001100100001000011011000110000110000001000011100000000000011000000001000111111111111111', 'B', '2023-03-21 19:40:24');
INSERT INTO `record` VALUES (25, 1, 11, 1, 4, 1, 12, '111003300', '223003322', '11111111111111100100000000011000000100100110000000000001100001000000111000000110010110000111100001101001100000011100000010000110000000000001100100100000011000000000100111111111111111', 'A', '2023-03-21 19:41:13');
INSERT INTO `record` VALUES (26, 1, 11, 1, 4, 1, 12, '1110003010010100323323221212', '2230032303221212112230330300', '11111111111111100000100000011010000000000111000000001001110000010001111001000000000110000100100001100000000010011110001000001110010000000011100000000001011000000100000111111111111111', 'B', '2023-03-21 19:41:26');
INSERT INTO `record` VALUES (27, 1, 11, 1, 4, 1, 12, '11100', '23033', '11111111111111100011000000011000000100100110100001010011100000001000011000100000000110000000000001100000000100011000010000000111001010000101100100100000011000000011000111111111111111', 'A', '2023-03-21 19:41:36');
INSERT INTO `record` VALUES (28, 4, 11, 1, 4, 1, 12, '', '', '11111111111111100000000000011011000000100110000001000001100000000100111000001000000111100100100111100000010000011100100000000110000010000001100100000011011000000000000111111111111111', 'B', '2023-03-21 19:41:56');
INSERT INTO `record` VALUES (29, 1, 11, 1, 4, 1, 12, '0110', '2223', '11111111111111100100000011011000000100000110010000001001100001000000011010000000001110000100100001110000000001011000000010000110010000001001100000100000011011000000100111111111111111', 'A', '2023-03-21 19:42:09');
INSERT INTO `record` VALUES (30, 1, 11, 1, 4, 1, 12, '11011', '23032', '11111111111111101000000100011000000010000110000000000111110000001000011100000000101110000000000001110100000000111000010000001111100000000001100001000000011000100000010111111111111111', 'A', '2023-03-21 19:42:14');
INSERT INTO `record` VALUES (31, 2, 11, 1, 1, 1, 12, '10101', '32320', '11111111111111111000000000011100010000000110100000000101100110010001011000000000000110000000000001100000000000011010001001100110100000000101100000001000111000000000011111111111111111', 'B', '2023-03-21 19:42:51');
INSERT INTO `record` VALUES (32, 1, 11, 1, 4, 1, 12, '10111', '32210', '11111111111111100000000010011000000000001110100011001001110000000000111000000001000110100000000101100010000000011100000000001110010011000101110000000000011001000000000111111111111111', 'B', '2023-03-21 19:43:10');
INSERT INTO `record` VALUES (33, 2, 11, 1, 4, 1, 12, '0110001', '2222222', '11111111111111101000000110011110000000000110010000000001100000101000011001000100000110000000000001100000100010011000010100000110000000001001100000000001111001100000010111111111111111', 'A', '2023-03-21 19:43:14');
INSERT INTO `record` VALUES (34, 1, 11, 1, 4, 1, 12, '01011', '22300', '11111111111111100000001001011010000000100110000000100001100000000000111000000100001111000100100011110000100000011100000000000110000100000001100100000001011010010000000111111111111111', 'B', '2023-03-21 19:44:59');
INSERT INTO `record` VALUES (35, 1, 11, 1, 4, 1, 12, '1103301100', '2222223000', '11111111111111100000000100011001010001000110000100000001110000000000011000001001100110000011000001100110010000011000000000001110000000100001100010001010011000100000000111111111111111', 'A', '2023-03-21 19:45:05');
INSERT INTO `record` VALUES (36, 1, 11, 1, 4, 1, 12, '110', '222', '11111111111111100000000100011110100010100110000000000001100000000000011000100010000111000011000011100001000100011000000000000110000000000001100101000101111000100000000111111111111111', 'A', '2023-03-21 19:45:09');
INSERT INTO `record` VALUES (37, 1, 11, 1, 4, 1, 12, '11103301001030', '22222300000120', '11111111111111110010001000011100000000000110001000000001101000000000011100011010000110000000000001100001011000111000000000010110000000010001100000000000111000010001001111111111111111', 'B', '2023-03-21 19:45:16');
INSERT INTO `record` VALUES (38, 1, 11, 1, 4, 1, 12, '1', '2', '11111111111111100000100001011000100000000111100000010001111100000000011000000000000110000011000001100000000000011000000000111110001000000111100000000100011010000100000111111111111111', 'A', '2023-03-21 19:46:04');
INSERT INTO `record` VALUES (39, 1, 11, 1, 4, 1, 12, '01121110030110030011030332222222122330330001030011', '22222222223300010000000122222222223300010000000120', '11111111111111100000100000011010000010000110000010011001100000000010011001000100000110001000010001100000100010011001000000000110011001000001100001000001011000000100000111111111111111', 'B', '2023-03-21 19:46:24');
INSERT INTO `record` VALUES (40, 1, 11, 1, 4, 1, 12, '101', '220', '11111111111111100010010010011000010000000110000000001101110000000000111000000000000111000100100011100000000000011100000000001110110000000001100000001000011001001001000111111111111111', 'B', '2023-03-21 20:06:46');
INSERT INTO `record` VALUES (41, 1, 11, 1, 4, 1, 12, '111100333001101001110', '322212223003300100110', '11111111111111100000000000011001000001001110101000000011110000000010011000000010000110010000001001100001000000011001000000001111000000010101110010000010011000000000000111111111111111', 'B', '2023-03-21 20:07:00');
INSERT INTO `record` VALUES (42, 3, 11, 1, 4, 1, 12, '00011103300000111', '22222223000000100', '11111111111111110000000001011000000000000111010000001001100101000000011000100000000110010100101001100000000100011000000010100110010000001011100000000000011010000000001111111111111111', 'B', '2023-03-22 08:22:58');
INSERT INTO `record` VALUES (43, 3, 11, 1, 4, 1, 12, '10030100112211', '32212222222230', '11111111111111100001000010011001000000001110100100000001100100010000011000000100100110000000000001100100100000011000001000100110000000100101110000000010011001000010000111111111111111', 'A', '2023-03-22 08:23:17');
INSERT INTO `record` VALUES (44, 3, 11, 1, 4, 1, 12, '000000001101121223333222222111100001000322333332', '222222223000000001222222223000030010033323032210', '11111111111111101010000000011110000001100110001000100001100001000000011000000001000110000000000001100010000000011000000010000110000100010001100110000001111000000001010111111111111111', 'B', '2023-03-22 08:23:55');
INSERT INTO `record` VALUES (45, 1, 11, 1, 4, 1, 12, '1001111010100300100333322222111223233030000', '3222122303003222121212223003030300100110010', '11111111111111100000000000011000011101101110000010000011100000001000011100000000000110000000000001100000000000111000010000000111000001000001110110111000011000000000000111111111111111', 'B', '2023-03-22 08:48:29');
INSERT INTO `record` VALUES (46, 6, 11, 1, 3, 1, 12, '', '', '11111111111111100101000000011010100000000110000101001101100000000100011000000000000110000011000001100000000000011000100000000110110010100001100000000101011000000010100111111111111111', 'A', '2023-03-22 09:36:37');
INSERT INTO `record` VALUES (47, 6, 11, 1, 3, 1, 12, '3', '2', '11111111111111100010000000011000101001000110000001000001100000010101011000101000000110000000000001100000010100011010101000000110000010000001100010010100011000000001000111111111111111', 'A', '2023-03-22 09:36:49');
INSERT INTO `record` VALUES (48, 6, 11, 1, 3, 1, 12, '11011000121010122323211011212333333', '23332322332332223211103001210003233', '11111111111111100000010000011001000000000110000000000011110000000011011010000000110110010000001001101100000001011011000000001111000000000001100000000010011000001000000111111111111111', 'A', '2023-03-22 09:37:28');
INSERT INTO `record` VALUES (49, 6, 11, 1, 3, 1, 12, '001010101122322333', '233232323222232123', '11111111111111100000010101011001110000000110100000000001110000000000011011000000000110000000000001100000000011011000000000001110000000000101100000001110011010101000000111111111111111', 'B', '2023-03-22 09:37:57');
INSERT INTO `record` VALUES (50, 6, 11, 1, 3, 1, 12, '0111111101011122332330', '2222223333033303332212', '11111111111111101000100000011000000000000110100001000001100000110000011000001011000110001000010001100011010000011000001100000110000010000101100000000000011000000100010111111111111111', 'A', '2023-03-22 09:38:23');
INSERT INTO `record` VALUES (51, 6, 11, 1, 3, 1, 12, '1100001010000033', '2332223323000001', '11111111111111100000000000011000101000000111000000000011100000100101011100001000010110000000000001101000010000111010100100000111000000000011100000010100011000000000000111111111111111', 'A', '2023-03-22 09:38:57');
INSERT INTO `record` VALUES (52, 6, 11, 1, 4, 1, 12, '0010011', '2223000', '11111111111111100010000001011010001000100110000001000001100010000010011000000000001110000100100001110000000000011001000001000110000010000001100100010001011010000001000111111111111111', 'B', '2023-03-22 09:40:14');
INSERT INTO `record` VALUES (53, 8, 11, 1, 4, 1, 12, '0001111000333', '2223000322220', '11111111111111110000000000011100100100000110000000000001100110000000011000000001011110010000001001111010000000011000000001100110000000000001100000100100111000000000001111111111111111', 'B', '2023-03-22 10:34:33');
INSERT INTO `record` VALUES (54, 8, 11, 1, 7, 1, 12, '1', '2', '11111111111111100000000000011000000000001110010000110001101000100000011000000001101110000011000001110110000000011000000100010110001100001001110000000000011000000000000111111111111111', 'B', '2023-03-22 14:04:31');
INSERT INTO `record` VALUES (55, 7, 11, 1, 8, 1, 12, '1', '0', '11111111111111100010001000011000000011000111000000001011100000000100011010000000000110001000010001100000000001011000100000000111010000000011100011000000011000010001000111111111111111', 'B', '2023-03-22 14:04:39');
INSERT INTO `record` VALUES (56, 8, 11, 1, 7, 1, 12, '0', '0', '11111111111111100001000011011000000000100110100000000001100000010001011000000100100110001000010001100100100000011010001000000110000000000101100100000000011011000010000111111111111111', 'B', '2023-03-22 14:04:47');
INSERT INTO `record` VALUES (57, 7, 11, 1, 8, 1, 12, '00000110001003332221223222111110100103', '22333323033010111212211223222332332300', '11111111111111100001000001011000000010000110000000000001100001000100011100100000110110001000010001101100000100111000100010000110000000000001100001000000011010000010000111111111111111', 'B', '2023-03-22 14:05:18');
INSERT INTO `record` VALUES (58, 8, 11, 1, 7, 1, 12, '1', '1', '11111111111111100000101000011000010000000110100000001001100100000010111100000100000110000000000001100000100000111101000000100110010000000101100000001000011000010100000111111111111111', 'B', '2023-03-22 14:05:24');
INSERT INTO `record` VALUES (59, 8, 11, 1, 7, 1, 12, '3', '3', '11111111111111110000100000011001010001001110001000010001110000000000011000000000000110010000001001100000000000011000000000001110001000010001110010001010011000000100001111111111111111', 'A', '2023-03-22 14:05:34');
INSERT INTO `record` VALUES (60, 8, 11, 1, 7, 1, 12, '101001100011101110122', '222223333322121111000', '11111111111111100100100000011110000100000110000000100001100000010000011001000001010110000000000001101010000010011000001000000110000100000001100000100001111000000100100111111111111111', 'A', '2023-03-22 14:06:03');
INSERT INTO `record` VALUES (61, 8, 11, 1, 7, 1, 12, '111011000011011011000333332223333232300001101211011122122222', '222223322333211211100003322333303332332111111111211000000000', '11111111111111110001000000011000000000010110100000000001100000001000011000111000010110001000010001101000011100011000010000000110000000000101101000000000011000000010001111111111111111', 'B', '2023-03-22 14:07:04');
INSERT INTO `record` VALUES (62, 1, 11, 1, 4, 1, 12, '1030110011101', '2222322122300', '11111111111111100001100000011101100000000110000000000001100100000001011000101000000111000000000011100000010100011010000000100110000000000001100000000110111000000110000111111111111111', 'B', '2023-03-22 14:10:43');
INSERT INTO `record` VALUES (63, 7, 11, 1, 1, 1, 12, '', '', '11111111111111100010000000011100000101000110100001100001100000000000011000000000101110000011000001110100000000011000000000000110000110000101100010100000111000000001000111111111111111', 'A', '2023-03-22 14:12:58');
INSERT INTO `record` VALUES (64, 1, 11, 1, 1, 1, 12, '', '', '11111111111111101100001000011000000000000110000000000001100001010000011000011000010111010000001011101000011000011000001010000110000000000001100000000000011000010000110111111111111111', 'B', '2023-03-22 14:13:24');
INSERT INTO `record` VALUES (65, 1, 11, 1, 4, 1, 12, '11033011', '22222222', '11111111111111100000001100011000110000000110000001001001100000000000011000100010100110010000001001100101000100011000000000000110010010000001100000001100011000110000000111111111111111', 'A', '2023-03-22 14:13:40');
INSERT INTO `record` VALUES (66, 1, 11, 1, 4, 1, 12, '1', '2', '11111111111111100000000001011100000001000110000000001101101000000000111000000000010110010011001001101000000000011100000000010110110000000001100010000000111010000000000111111111111111', 'A', '2023-03-22 14:13:44');
INSERT INTO `record` VALUES (67, 1, 11, 1, 4, 1, 12, '10111', '32210', '11111111111111100000000000011000000000001110000000011001100000000011111010011000000111000000000011100000011001011111000000000110011000000001110000000000011000000000000111111111111111', 'B', '2023-03-22 14:13:49');
INSERT INTO `record` VALUES (68, 1, 11, 1, 4, 1, 12, '1100111001', '2232300010', '11111111111111100001000000011000001000010111000000000001100100100000111001010000010110000000000001101000001010011100000100100110000000000011101000010000011000000010000111111111111111', 'B', '2023-03-22 14:13:56');
INSERT INTO `record` VALUES (69, 1, 11, 1, 4, 1, 12, '11110111030', '22300322210', '11111111111111100000000000011000100001000110000001100001100000000000111010000001011110100000000101111010000001011100000000000110000110000001100010000100011000000000000111111111111111', 'B', '2023-03-22 14:14:06');
INSERT INTO `record` VALUES (70, 1, 11, 1, 4, 1, 12, '1110003001', '2230032300', '11111111111111110100001000011000000000000110000101001001100000000000111000010001000110100000000101100010001000011100000000000110010010100001100000000000011000010000101111111111111111', 'B', '2023-03-22 14:19:00');
INSERT INTO `record` VALUES (71, 1, 11, 1, 4, 1, 12, '111101011110333003000100111', '222222230000000322303221212', '11111111111111101011000000011010001000000111000000000001100000000010011000010100000110001000010001100000101000011001000000000110000000000011100000010001011000000011010111111111111111', 'A', '2023-03-22 14:37:46');
INSERT INTO `record` VALUES (72, 1, 11, 1, 4, 1, 12, '11103001101100300100333222122121222112333033300330110101212', '22223032230322121211000003232300322303000103333323211210010', '11111111111111100000001000011001000000000110000100110101101000010000011001000000000110100000000101100000000010011000001000010110101100100001100000000010011000010000000111111111111111', 'B', '2023-03-22 14:38:16');
INSERT INTO `record` VALUES (73, 1, 11, 1, 4, 1, 12, '1001100111010303000322232211233222300000001030332222222212210', '3221222223303221112230333003001010001012212222222230003001030', '11111111111111100010000100011000000100001110000001100001100000001001011010010000000110000000000001100000001001011010010000000110000110000001110000100000011000100001000111111111111111', 'A', '2023-03-22 14:38:49');
INSERT INTO `record` VALUES (74, 1, 11, 1, 4, 1, 12, '111111100101000', '222222223000033', '11111111111111101010000000011010000101100110000000000001100000010000011000010000000110000111100001100000001000011000001000000110000000000001100110100001011000000001010111111111111111', 'A', '2023-03-22 14:58:08');
INSERT INTO `record` VALUES (75, 1, 11, 1, 4, 1, 12, '11011011100030', '32212233303230', '11111111111111100000011000011100000100001110011000000001100000000010011010000000000110100000000101100000000001011001000000000110000000011001110000100000111000011000000111111111111111', 'A', '2023-03-22 14:58:17');
INSERT INTO `record` VALUES (76, 1, 11, 1, 4, 1, 12, '1110103001110103030003222322121122111223033211', '2222222233003000000111222222332300000121000332', '11111111111111101000001000011010000100100110000001000001101000001000011000010000000110010000001001100000001000011000010000010110000010000001100100100001011000010000010111111111111111', 'A', '2023-03-22 14:58:45');
INSERT INTO `record` VALUES (77, 1, 11, 1, 4, 1, 12, '10101101111000003003232211222233003003222123212233', '22222321233000000101222222233301003010330033321221', '11111111111111100010000010011000100001000110010101000001100000000001011000001000010110000000000001101000010000011010000000000110000010101001100010000100011001000001000111111111111111', 'A', '2023-03-22 15:03:32');
INSERT INTO `record` VALUES (78, 1, 11, 1, 4, 1, 12, '11111111000300003033003222112232232330001000001111121', '33221122230033212212322230033000101000012211222300322', '11111111111111100000000000011000001100011111100000100001100000000000011100100100000110000000000001100000100100111000000000000110000100000111111000110000011000000000000111111111111111', 'A', '2023-03-22 15:04:08');
INSERT INTO `record` VALUES (79, 1, 11, 1, 4, 1, 12, '10030000001222100000122221', '32212222223000322222300000', '11111111111111110000000010011110000000001110000011000001100001000000011000000000110110000000000001101100000000011000000010000110000011000001110000000001111001000000001111111111111111', 'B', '2023-03-22 15:06:15');
INSERT INTO `record` VALUES (80, 1, 11, 1, 4, 1, 12, '100301031', '322122222', '11111111111111110000000000011001100001001110000100000001101001001000011000000000000110000100100001100000000000011000010010010110000000100001110010000110011000000000001111111111111111', 'A', '2023-03-22 15:06:34');
INSERT INTO `record` VALUES (81, 1, 11, 1, 4, 1, 12, '11003030001030103011212321221112222230323030110333300010301030112123212222', '33222322221101000303032222221212100000030300322230003232222111221101222230', '11111111111111100000000000011000000000010110000101000011100000010000011001000110100110100000000101100101100010011000001000000111000010100001101000000000011000000000000111111111111111', 'A', '2023-03-22 15:07:22');
INSERT INTO `record` VALUES (82, 1, 11, 1, 2, 1, 12, '0103010301012222', '2333323223332222', '11111111111111100100100011011000000000000111000000001001110010101000011000000000000110000000000001100000000000011000010101001110010000000011100000000000011011000100100111111111111111', 'A', '2023-03-22 15:07:45');
INSERT INTO `record` VALUES (83, 1, 11, 1, 2, 1, 12, '100010330110303010122122233222111030101', '322221232212230300000322222303230000001', '11111111111111101001110000011000001000001110000000001001100000000000111100000000000110000100100001100000000000111100000000000110010000000001110000010000011000001110010111111111111111', 'A', '2023-03-22 15:08:28');
INSERT INTO `record` VALUES (84, 1, 11, 1, 2, 1, 12, '000001222222', '222222223230', '11111111111111110000000000011100000000000110000011000001100100000000011010011001000110000100100001100010011001011000000000100110000011000001100000000000111000000000001111111111111111', 'A', '2023-03-22 15:08:37');
INSERT INTO `record` VALUES (85, 2, 11, 1, 4, 1, 12, '1110001001000003222232212322233010301033010111103333300112111003333', '3222122223000300001222122222230000030000322222321123230300332232223', '11111111111111110000001000011000100100001110000000100011100000010000011000000100000110010000001001100000100000011000001000000111000100000001110000100100011000010000001111111111111111', 'A', '2023-03-22 15:12:02');
INSERT INTO `record` VALUES (86, 2, 11, 1, 1, 1, 12, '01000011000011212211000033333222210101221101010103332303323030', '23033221121222222230300300322303303222212333000003000001211222', '11111111111111100100000000011000000100100110100100100011100000001000011011000000000110000000000001100000000011011000010000000111000100100101100100100000011000000000100111111111111111', 'A', '2023-03-22 15:18:18');
INSERT INTO `record` VALUES (87, 2, 11, 1, 1, 1, 12, '00000010011001122221212212111232330303003000000322222322112232300300030001100332320', '22222230003030332211212101000322300032332211212332212110001000032230301033232211211', '11111111111111110000010001011001000000000110000000100001110100000000011001100010000110000000000001100001000110011000000000101110000100000001100000000010011010001000001111111111111111', 'A', '2023-03-22 15:18:56');
INSERT INTO `record` VALUES (88, 2, 11, 1, 1, 1, 12, '11000000011010330322322111211110000012212322112222230030103303222230322330010300333000001', '33221232211222223000032223300322230030300333000001112332123211010010111122123321211222220', '11111111111111100001000000011000000010011110001000000001100000010000111000001010010110000000000001101001010000011100001000000110000000010001111001000000011000000010000111111111111111', 'B', '2023-03-22 15:21:42');
INSERT INTO `record` VALUES (89, 1, 11, 1, 2, 1, 12, '000001100011122111000011122222300320', '222223003222212230322300003011122121', '11111111111111110000010000011000000010000110000000101101110010010000011010000000000110000000000001100000000001011000001001001110110100000001100001000000011000001000001111111111111111', 'A', '2023-03-22 15:22:03');
INSERT INTO `record` VALUES (90, 1, 11, 1, 4, 1, 12, '1103301011221110010301003000322', '2222230033030110112222230301000', '11111111111111100000000100011001010000000110000000001001100010000000011110100001000110010000001001100010000101111000000001000110010000000001100000001010011000100000000111111111111111', 'B', '2023-03-22 15:23:39');
INSERT INTO `record` VALUES (91, 1, 11, 1, 4, 1, 12, '', '', '11111111111111100000000100011000000000001110000100001011100000101001011000000000100111000000000011100100000000011010010100000111010000100001110000000000011000100000000111111111111111', 'A', '2023-03-22 15:23:49');
INSERT INTO `record` VALUES (92, 1, 11, 1, 4, 1, 12, '11011110001110333323323223', '22223221223033232111123330', '11111111111111100001001100011000000000000110010001010001100001001001011000000000000111000000000011100000000000011010010010000110001010001001100000000000011000110010000111111111111111', 'B', '2023-03-22 15:24:28');
INSERT INTO `record` VALUES (93, 1, 11, 1, 4, 1, 12, '001', '222', '11111111111111100000000010011000001100010110000001100101100000000000011100100000000110001000010001100000000100111000000000000110100110000001101000110000011001000000000111111111111111', 'A', '2023-03-22 15:24:34');
INSERT INTO `record` VALUES (94, 1, 11, 1, 4, 1, 12, '01103', '22222', '11111111111111100000100011011000000000000111000100000101100011100000011000000000000110001000010001100000000000011000000111000110100000100011100000000000011011000100000111111111111111', 'A', '2023-03-22 15:24:42');
INSERT INTO `record` VALUES (95, 1, 11, 1, 4, 1, 12, '1003', '2303', '11111111111111100100000000011000000101000110000000000011100100100100011000000010000110100100100101100001000000011000100100100111000000000001100010100000011000000000100111111111111111', 'A', '2023-03-22 15:24:47');
INSERT INTO `record` VALUES (96, 1, 11, 1, 4, 1, 12, '00001101111000033322232221110112122', '22222303030010112222230322212123332', '11111111111111100100100000011000000000000110000110100001110000100001011100000001000110000000000001100010000000111010000100001110000101100001100000000000011000000100100111111111111111', 'A', '2023-03-22 15:45:53');
INSERT INTO `record` VALUES (97, 1, 11, 1, 1, 1, 12, '', '', '11111111111111101100010000011100000000000111011110000001100000000000011000000001000110000000000001100010000000011000000000000110000001111011100000000000111000001000110111111111111111', 'all', '2023-03-22 15:56:07');
INSERT INTO `record` VALUES (98, 1, 11, 1, 4, 1, 12, '0000100010001111211111233221221222230300322230000', '2222322122223030032223000322230030322230000010000', '11111111111111100000001000011000000000000110100000000001100000010001011001010011000111000100100011100011001010011010001000000110000000000101100000000000011000010000000111111111111111', 'A', '2023-03-22 17:16:48');
INSERT INTO `record` VALUES (99, 1, 11, 1, 4, 1, 12, '11110033001100030', '22300322212122222', '11111111111111110000000000011000110001000110001000000001100000010100111000001000000110000011000001100000010000011100101000000110000000010001100010001100011000000000001111111111111111', 'A', '2023-03-22 17:16:59');
INSERT INTO `record` VALUES (100, 1, 11, 1, 4, 1, 12, '1010000010011210030323032303221221101112100303032230032303221232111011121100', '3232212322300332212122110010003030322212322300303221223030030323321112233230', '11111111111111100000010010011000000010001110010000000111100100000000011000000000000110100100100101100000000000011000000000100111100000001001110001000000011001001000000111111111111111', 'B', '2023-03-22 17:17:34');
INSERT INTO `record` VALUES (101, 1, 11, 1, 4, 1, 12, '010001000000122211112121211232212330003330032230032222112333000032', '230322121233030033011111232212330301033322230330322330100301121010', '11111111111111100000100000011000011000000111000100100011100000000000011000010000000111100000000111100000001000011000000000000111000100100011100000011000011000000100000111111111111111', 'B', '2023-03-22 17:19:03');
INSERT INTO `record` VALUES (102, 1, 11, 1, 4, 1, 12, '0000001010101221232123233003001010011232210110300', '2222223000322322300322211101001033033233321111222', '11111111111111100000001000011001000001000110100000011001110000010000011001000001000110000000000001100010000010011000001000001110011000000101100010000010011000010000000111111111111111', 'A', '2023-03-22 17:21:01');
INSERT INTO `record` VALUES (103, 1, 11, 1, 4, 1, 12, '1012', '2222', '11111111111111111000000010011010000000000110000000100001111011000000011000000100000110000000000001100000100000011000000011011110000100000001100000000001011001000000011111111111111111', 'A', '2023-03-22 17:25:28');
INSERT INTO `record` VALUES (104, 1, 11, 1, 4, 1, 12, '00100000111012111222212223330000323003222330003010100011112322230323212222230', '22322122303000303303332322112121103010012112323211012232330303221232330000122', '11111111111111110000001001011000010000100110101001000001110000000000111000000000000110000000000001100000000000011100000000001110000010010101100100001000011010010000001111111111111111', 'A', '2023-03-22 18:22:48');
INSERT INTO `record` VALUES (105, 1, 11, 1, 4, 1, 12, '00000110122110001000323333322221101221122211233300322330300000000110', '22222300033003222211210012222223330303000000011111222222222332300300', '11111111111111101000000000011000000000100110100010000001100110000100011010010000000110000100100001100000001001011000100001100110000001000101100100000000011000000000010111111111111111', 'B', '2023-03-22 18:25:34');
INSERT INTO `record` VALUES (106, 9, 11, 1, 4, 1, 12, '1103011100003322330001001122111011110333332300333222322222', '2303223003222222110010122222232303000303330332232211011112', '11111111111111100000000000011000000000000110010000000011100100000010011010001101000110101000010101100010110001011001000000100111000000001001100000000000011000000000000111111111111111', 'A', '2023-03-22 18:33:04');
INSERT INTO `record` VALUES (107, 9, 11, 1, 4, 1, 12, '101110333301110003011111103330332332221122333000000', '322122222223000000003222222221233000333233332111210', '11111111111111110000100110011000000100001110000100000001100000000000011000001010000110000100100001100001010000011000000000000110000000100001110000100000011001100100001111111111111111', 'B', '2023-03-22 19:47:13');
INSERT INTO `record` VALUES (108, 9, 11, 1, 4, 1, 12, '1111110033323001011110032300100', '2222223003000032222221122212333', '11111111111111100000000000011001000110000111010000000101110010001000011000000000000110010000001001100000000000011000010001001110100000001011100001100010011000000000000111111111111111', 'A', '2023-03-23 09:24:07');
INSERT INTO `record` VALUES (109, 9, 11, 1, 4, 1, 12, '1111111110333000000000322222222223000000322233000000111112321232123222323032330001111033330101030100', '2222230030003232212221100300010332322222232221011001001000003230323221112332232322210110103010100000', '11111111111111111000000000011000000000000111001100010101100010000000011100000000000110010000001001100000000000111000000001000110101000110011100000000000011000000000011111111111111111', 'B', '2023-03-23 09:24:57');
INSERT INTO `record` VALUES (110, 9, 11, 1, 4, 1, 12, '12', '22', '11111111111111100001100000011101000000000110011000000001100000001000011000110000000110000011000001100000001100011000010000000110000000011001100000000010111000000110000111111111111111', 'A', '2023-03-23 10:42:43');
INSERT INTO `record` VALUES (111, 9, 11, 1, 4, 1, 12, '111110', '222300', '11111111111111100000000000011001000100000111000000000001100101001000011100000010010110100000000101101001000000111000010010100110000000000011100000100010011000000000000111111111111111', 'A', '2023-03-23 10:58:22');
INSERT INTO `record` VALUES (112, 9, 11, 1, 4, 1, 12, '11011110100', '22233000323', '11111111111111100000001000011000000000000110000001010101100010000000011000110001010111000000000011101010001100011000000001000110101010000001100000000000011000010000000111111111111111', 'A', '2023-03-23 11:49:39');
INSERT INTO `record` VALUES (113, 9, 11, 1, 4, 1, 12, '10301111100', '22222223221', '11111111111111100000011010011000000000000110000000000001100000100101011010000101100110000000000001100110100001011010100100000110000000000001100000000000011001011000000111111111111111', 'A', '2023-03-23 11:52:02');
INSERT INTO `record` VALUES (114, 9, 11, 1, 4, 1, 12, '10301030103011111121211233211223', '22222230030303033032223030103330', '11111111111111100000000010011110000000000110100010000001101000010000011000000010000110011000011001100001000000011000001000010110000001000101100000000001111001000000000111111111111111', 'B', '2023-03-23 12:04:42');
INSERT INTO `record` VALUES (115, 3, 11, 1, 4, 1, 12, '00000112110110000032230032222322110110000011121122223000322222123223003230030032221223030', '22222300003032212222212322300322300032223003223000322300001100000111222121000301112112220', '11111111111111100000000001011110000000000110000000000001110001000100011010011000000110001000010001100000011001011000100010001110000000000001100000000001111010000000000111111111111111', 'B', '2023-03-23 17:46:50');
INSERT INTO `record` VALUES (116, 3, 11, 1, 4, 1, 12, '011010100111000', '222222300030330', '11111111111111100000101000011001000100000110000000000101100010010000011000010101000110000000000001100010101000011000001001000110100000000001100000100010011000010100000111111111111111', 'A', '2023-03-23 17:47:42');
INSERT INTO `record` VALUES (117, 3, 11, 1, 4, 1, 12, '1010101010110333233300030011121221222222332333011010103010330303001111122', '2303222322232221121100300032300032222300000011011122222232212233032300000', '11111111111111100000001000011010000000000110011000100101110010000001011000000000100110000000000001100100000000011010000001001110100100011001100000000001011000010000000111111111111111', 'A', '2023-03-23 17:48:46');
INSERT INTO `record` VALUES (118, 3, 11, 1, 4, 1, 12, '', '', '11111111111111101000000100011000101000000111000000000001100100000000111000000010010111000000000011101001000000011100000000100110000000000011100000010100011000100000010111111111111111', 'B', '2023-03-23 17:48:48');
INSERT INTO `record` VALUES (119, 3, 11, 1, 4, 1, 12, '000001010011101222223221223030003000032222212223003000322221230', '222223000003222322121001000032303221123222223000003003032212222', '11111111111111100001001000011000110000000110000000000001111000100000011100010000000110000100100001100000001000111000000100011110000000000001100000001100011000010010000111111111111111', 'A', '2023-03-24 08:15:38');
INSERT INTO `record` VALUES (120, 3, 11, 1, 4, 1, 12, '0110101121003330303322211123332111100012221210011211003010333301101103332332300110032303223033032', '2222222300300003222300003222230000323330322212321112223032321210110001123212321110301121210003030', '11111111111111100100000100011000000000000110100000000001100111000000011000110000010110000011000001101000001100011000000011100110000000000101100000000000011000100000100111111111111111', 'B', '2023-03-24 08:16:48');
INSERT INTO `record` VALUES (121, 1, 11, 1, 4, 1, 12, '00000000110012112122333222211001222323032330300000012112211111110010000322', '22222222300003003222223221101000010000322300322212333303011003233032233000', '11111111111111101001000000011010000000000110001000000001100100001001011000000000000110010111101001100000000000011010010000100110000000010001100000000001011000000010010111111111111111', 'B', '2023-03-24 13:04:33');
INSERT INTO `record` VALUES (122, 9, 11, 1, 4, 1, 12, '1103011110011010032323322223000001033300111011122333', '2303221212332121232223333300001101101000032232230322', '11111111111111100000000100011000001000000111011100000011100000100010011000000000000111000000000011100000000000011001000100000111000000111011100000010000011000100000000111111111111111', 'A', '2023-03-24 15:04:34');
INSERT INTO `record` VALUES (123, 9, 11, 1, 4, 1, 12, '1111111111003300', '2222223003032221', '11111111111111110000000000011100010001000110000110000001101101000000011000000000000110010000001001100000000000011000000010110110000001100001100010001000111000000000001111111111111111', 'A', '2023-03-24 15:04:47');
INSERT INTO `record` VALUES (124, 9, 11, 1, 4, 1, 12, '1111111100300033330303321232111111010000323322123303323001103001111111112212', '2222223003032333300300111112222223221112123333300322300033011111100300121211', '11111111111111100000000000011001010000100111000000001001100010110001011000000000000110010000001001100000000000011010001101000110010000000011100100001010011000000000000111111111111111', 'A', '2023-03-24 15:05:37');
INSERT INTO `record` VALUES (125, 9, 11, 1, 4, 1, 12, '0010112211111000003333333321111211111', '2222223000330030332223330101033323220', '11111111111111110000000101011001000000010110100000001001101000000000011000000000100110000011000001100100000000011000000000010110010000000101101000000010011010100000001111111111111111', 'B', '2023-03-24 15:05:59');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `photo` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `rating` int(11) NULL DEFAULT 1500,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (1, '123', '$2a$10$Naz79w.nio0t4IT0d8QrUuAOHx9BKhC5EzBguA/Uxgq9Qon3Rwp6W', 'https://cdn.acwing.com/media/user/profile/photo/1_lg_ac71ddd4ad.jpg', 1554);
INSERT INTO `user` VALUES (2, '111', '$2a$10$niR9B/ikD.WWZkv9yuhjqOcIh6f36knwNk8MLuBSweSZUwZmIIas6', 'https://cdn.acwing.com/media/user/profile/photo/1_lg_ac71ddd4ad.jpg', 1553);
INSERT INTO `user` VALUES (3, 'cly', '$2a$10$Hvb5pSHxweXusDovi4LvGOdewZ.PFJ0WT7IhGXRv2.PpdL/vX8caG', 'https://cdn.acwing.com/media/user/profile/photo/86034_lg_a0ae539ee2.jpg', 1581);
INSERT INTO `user` VALUES (4, '无敌的bot', '$2a$10$XPJ2QfsW5U6y2QE08fBdOun.WmbmBmQ/H9QChh6RzINEWTdlJw7VO', 'http://blog.beink.cn/favicon.ico', 1650);
INSERT INTO `user` VALUES (6, 'wg', '$2a$10$RlpHyA2Xl9wKaPhdVbCLzum41CK6/CUMFoXgQDvN03ES4clP.g8p.', 'https://cdn.acwing.com/media/user/profile/photo/226809_lg_2fcfb9ed3a.jpg', 1500);
INSERT INTO `user` VALUES (7, 'fusong', '$2a$10$yOT2E29yE4eoyGtfnPZJjOzEEZxpOkIFlAn7sGAVzh184MIJo2pYK', 'https://cdn.acwing.com/media/user/profile/photo/229336_lg_2fb5c2d53f.jpg', 1510);
INSERT INTO `user` VALUES (8, 'spx', '$2a$10$S/RkD8y1p1o6ZJ4cDq1hMuVNVFXxxHJjrVuNE6.5HqOicrc1JUH9i', 'https://cdn.acwing.com/media/user/profile/photo/228025_lg_a6ae437e3c.jpg', 1517);
INSERT INTO `user` VALUES (9, 'Tom', '$2a$10$2F3miBnUwXV2wRZLZ1HUNuqG1uBUi6MK8xKDOHX/VYu/UHhXIj1Te', 'https://cdn.acwing.com/media/user/profile/photo/71127_lg_5c719f083a.png', 1502);

SET FOREIGN_KEY_CHECKS = 1;
